* Syncronize Wantedly with SNS

** Flow
#+BEGIN_SRC plantuml :file wantedly.png
@startuml
!theme materia

actor Wantedly

Wantedly -> GMail : Send emails
GMail -> GAS : main

activate GAS
GAS -> Filter
GAS <-- Filter
GAS -> Distribute
GAS <-- Distribute
GAS -> Notify

activate Notify
Notify ->> Slack
Notify ->> Chatwork
Notify ->> Discord
GAS <-- Notify
deactivate Notify
deactivate GAS

@enduml
#+END_SRC

#+RESULTS:
[[file:wantedly.png]]


#+BEGIN_SRC ocaml
type sns_type =
  { Slack
  ; Chatwork
  ; Discord
  }

module Gmail : sig
  module Message : sig
    val t =
      { from : string
      ; to_ : string list
      ; cc : string list
      ; subject : string
      ; body : string
      }
  end

  val filter_by_address : Re.t -> Message.t list -> Message.t list

  module Distributed : sig
    type username = string
    type messages = Message.t list
    type t = (username * messages) list

    val by_username : Message.t list -> t
  end
end

module Sns : sig
  module Of_service : functor (Service : Services_trait) -> sig
    exception Notify_failed of string

    val name : string
    val notify : Distributed.t -> () -> (unit, Notify_failed) result
  end
end

module Slack : Sns.Of_service(Services.Slack) with t = Services.t
module Chatwork : Sns.Of_service(Services.Chatwork) with t = Services.t
module Discord : Sns.Of_service(Services.Discord) with t = Services.t


(* main.ml *)
let () =
  [Slack; Chatwork; Discord]
  |> List.iter
      (fun (module Service) ->
        Service.notify distributed ()
        |> Result.map_error
            (fun (Notify_failed message) ->
              Logs.warn (fun m -> m "Failed send message to %s: %s" Service.name message)))
#+END_SRC

** TODO
- [ ] Write an article at hd2g.github.io
- [ ] Rewrite [[*Flow][Flow]] to TypeScript type.d
